{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Interpretador","text":"<p>Universidade de Bras\u00edlia (UnB) Faculdade de Ci\u00eancia e Tecnologia em Engenharia (FCTE) Disciplina: Compiladores 1 Semestre: 2025.2 Professor: Sergio Freitas  </p>"},{"location":"#descricao-do-projeto","title":"\ud83d\udcdd Descri\u00e7\u00e3o do Projeto","text":""},{"location":"#equipe-de-desenvolvimento","title":"\ud83d\udc65 Equipe de Desenvolvimento","text":"<p>Dara Maria(@daramariabs)</p> <p>Gustavo Oki(@GustOki)</p> <p>Samara Alves(@SamaraAlvess)</p> <p>Marcos Quixas(@marcosfilhopq)</p>"},{"location":"Dificuldades/dificuldades/","title":"\u26a0\ufe0f Dificuldades do Projeto","text":"<p>Durante o desenvolvimento do Interpretador, a equipe enfrentou alguns desafios importantes que impactaram diretamente nas decis\u00f5es de projeto e na organiza\u00e7\u00e3o das entregas. As principais dificuldades foram:</p>"},{"location":"Dificuldades/dificuldades/#compilador-x-interpretador","title":"\ud83d\udd0e Compilador x Interpretador","text":"<p>Um dos primeiros debates do grupo foi decidir se o sistema seria implementado como compilador ou como interpretador. - O compilador permitiria otimiza\u00e7\u00f5es mais avan\u00e7adas e gera\u00e7\u00e3o de c\u00f3digo eficiente, mas demandaria mais esfor\u00e7o e conhecimento em est\u00e1gios como an\u00e1lise sem\u00e2ntica, gera\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio e final. - O interpretador, por outro lado, se mostrou mais vi\u00e1vel para os prazos da disciplina, j\u00e1 que possibilita a execu\u00e7\u00e3o direta da AST (Abstract Syntax Tree), facilitando a valida\u00e7\u00e3o das constru\u00e7\u00f5es da linguagem. \u27a1\ufe0f Ap\u00f3s discuss\u00f5es, a equipe optou por seguir com o interpretador.</p>"},{"location":"Dificuldades/dificuldades/#escolha-da-linguagem-de-implementacao","title":"\ud83d\udcbb Escolha da Linguagem de Implementa\u00e7\u00e3o","text":"<p>Outro ponto de dificuldade foi escolher a linguagem para implementar o projeto. - Algumas op\u00e7\u00f5es levantadas: Python e C. - O Python oferecia facilidade de prototipagem, mas menor integra\u00e7\u00e3o com Flex/Bison. - O C, apesar de exigir maior aten\u00e7\u00e3o \u00e0 manipula\u00e7\u00e3o de mem\u00f3ria e estruturas, mostrou-se o mais adequado por ser compat\u00edvel com Flex/Bison e alinhar com os objetivos da disciplina. \u27a1\ufe0f A decis\u00e3o final foi implementar em C.</p>"},{"location":"Dificuldades/dificuldades/#ferramentas-e-integracao","title":"\ud83d\udee0\ufe0f Ferramentas e Integra\u00e7\u00e3o","text":"<ul> <li>Configurar corretamente o ambiente com Flex e Bison gerou dificuldades iniciais, especialmente para quem nunca havia trabalhado com essas ferramentas.  </li> <li>A equipe precisou alinhar vers\u00f5es, corrigir problemas de instala\u00e7\u00e3o e entender a estrutura m\u00ednima de arquivos <code>.l</code> e <code>.y</code>.  </li> </ul>"},{"location":"Dificuldades/dificuldades/#organizacao-em-equipe","title":"\ud83d\udc65 Organiza\u00e7\u00e3o em Equipe","text":"<ul> <li>O trabalho em grupo tamb\u00e9m trouxe o desafio de dividir responsabilidades de forma equilibrada.  </li> <li>Nem todos tinham a mesma experi\u00eancia com Git/GitHub, o que gerou dificuldades no in\u00edcio com versionamento e integra\u00e7\u00e3o de c\u00f3digo.  </li> </ul>"},{"location":"Dificuldades/dificuldades/#conclusao","title":"\ud83d\udccc Conclus\u00e3o","text":"<p>Apesar das dificuldades, esses desafios foram fundamentais para o aprendizado da equipe, que conseguiu avan\u00e7ar nas tomadas de decis\u00e3o, melhorar a colabora\u00e7\u00e3o e desenvolver uma solu\u00e7\u00e3o funcional dentro do prazo da disciplina.</p>"},{"location":"Planejamento/planejamento/","title":"\ud83d\uddc2\ufe0f Planejamento do Projeto","text":"<p>Esta se\u00e7\u00e3o apresenta o plano de sprints para o desenvolvimento do Interpretador, descrevendo os objetivos, entregas, tarefas e observa\u00e7\u00f5es de cada ciclo. O planejamento busca organizar o fluxo de trabalho, garantir a evolu\u00e7\u00e3o incremental do sistema e facilitar a integra\u00e7\u00e3o entre os membros da equipe.</p>"},{"location":"Planejamento/planejamento/#sprint-1","title":"\ud83d\udccc Sprint 1","text":"<p>Objetivos - Formar equipes e organizar ambiente (reposit\u00f3rio, ferramentas, Flex/Bison). - Definir linguagem-fonte e gram\u00e1tica inicial.  </p> <p>Entregas - Documento inicial com tokens e exemplos. - Prot\u00f3tipo de gram\u00e1tica para Bison. - Ambiente configurado (hello world Flex/Bison).  </p> <p>Tarefas - Criar reposit\u00f3rio e adicionar membros (incluir sergioaafreitas). - Criar <code>.l</code> e <code>.y</code> m\u00ednimos. - Definir sintaxe b\u00e1sica em <code>docs/especificacao_linguagem.md</code>.  </p> <p>Observa\u00e7\u00f5es - Daily r\u00e1pida nas quartas-feiras; familiarizar-se com Git/GitHub.  </p>"},{"location":"Planejamento/planejamento/#sprint-2","title":"\ud83d\udccc Sprint 2","text":"<p>Objetivos - Completar an\u00e1lise l\u00e9xica (Flex). - Implementar regras b\u00e1sicas do parser (Bison). - Preparar apresenta\u00e7\u00e3o P1.  </p> <p>Entregas - <code>.l</code> completo; primeiras regras em <code>.y</code>; formul\u00e1rio P1.  </p> <p>Tarefas - Finalizar regexs no <code>.l</code> (espa\u00e7os, coment\u00e1rios). - Regras sint\u00e1ticas b\u00e1sicas em <code>.y</code>. - Testes l\u00e9xicos/sint\u00e1ticos com exemplos.  </p> <p>Observa\u00e7\u00f5es - O Sprint fecha com a apresenta\u00e7\u00e3o do P1 (m\u00e1ximo de 5 minutos por equipe).  </p>"},{"location":"Planejamento/planejamento/#sprint-3","title":"\ud83d\udccc Sprint 3","text":"<p>Objetivos - Construir AST; iniciar an\u00e1lise sem\u00e2ntica b\u00e1sica; melhorar mensagens de erro.  </p> <p>Entregas - Estruturas/classes da AST; m\u00f3dulo sem\u00e2ntico inicial; parser que constr\u00f3i AST.  </p> <p>Tarefas - Implementar a\u00e7\u00f5es no <code>.y</code> para criar n\u00f3s da AST. - Criar tabela de s\u00edmbolos; tratar erros b\u00e1sicos.  </p> <p>Observa\u00e7\u00f5es - Quartas-feiras dedicadas ao desenvolvimento pr\u00e1tico e integra\u00e7\u00e3o.  </p>"},{"location":"Planejamento/planejamento/#sprint-4","title":"\ud83d\udccc Sprint 4","text":"<p>Objetivos - Implementar interpreta\u00e7\u00e3o da AST (execu\u00e7\u00e3o direta). - Aprimorar a an\u00e1lise sem\u00e2ntica, tratando constru\u00e7\u00f5es mais complexas. - Preparar o Ponto de Controle P2.  </p> <p>Entregas - M\u00f3dulo interpretador capaz de executar instru\u00e7\u00f5es. - An\u00e1lise sem\u00e2ntica mais robusta. - Formul\u00e1rio de P2 preenchido e apresenta\u00e7\u00e3o realizada.  </p> <p>Tarefas - Criar a l\u00f3gica de interpreta\u00e7\u00e3o recursiva (<code>interpretNode()</code> / m\u00e9todos <code>eval()</code> dos n\u00f3s). - Consolidar estruturas de controle (<code>if</code>, <code>while</code>, etc.). - Testar o interpretador com programas de exemplo. - Preparar a apresenta\u00e7\u00e3o P2.  </p> <p>Observa\u00e7\u00f5es - Use as aulas pr\u00e1ticas para integrar e corrigir bugs. - O Sprint termina com a apresenta\u00e7\u00e3o P2.  </p>"},{"location":"Planejamento/planejamento/#sprint-5","title":"\ud83d\udccc Sprint 5","text":"<p>Objetivos - Adicionar otimiza\u00e7\u00f5es opcionais (ex.: simplifica\u00e7\u00e3o de express\u00f5es constantes). - Incluir recursos adicionais (fun\u00e7\u00f5es, arrays, strings). - Realizar testes integrados e preparar entrega final.  </p> <p>Entregas - Interpretador ampliado, com otimiza\u00e7\u00f5es e funcionalidades extras. - Testes de integra\u00e7\u00e3o. - Vers\u00e3o final pronta para entrega via Teams.  </p> <p>Tarefas - Implementar otimiza\u00e7\u00f5es simples (constant folding, remo\u00e7\u00e3o de n\u00f3s redundantes). - Estender a linguagem com novos recursos, se houver tempo. - Testar intensivamente e entregar o projeto final.  </p> <p>Observa\u00e7\u00f5es - Planejar a entrega para evitar imprevistos.  </p>"},{"location":"Planejamento/planejamento/#sprint-6","title":"\ud83d\udccc Sprint 6","text":"<p>Objetivos - Participar das entrevistas finais com o professor. - Corrigir pend\u00eancias/bugs emergentes. - Concluir a documenta\u00e7\u00e3o e encerrar a disciplina.  </p> <p>Entregas - Entrevistas de entrega do projeto final. - Documenta\u00e7\u00e3o completa (README, manual de uso, explica\u00e7\u00f5es sobre a AST e a execu\u00e7\u00e3o). - Ajustes finais (caso o professor detecte problemas).  </p> <p>Tarefas - Preparar-se para as entrevistas: cada membro domina parser, AST, sem\u00e2ntica e interpretador. - Corrigir falhas apontadas. - Finalizar documenta\u00e7\u00e3o e organizar exemplos de uso.  </p> <p>Observa\u00e7\u00f5es - Consulte o plano de ensino para verificar as datas das entrevistas. - Falta de comparecimento pode zerar a nota da apresenta\u00e7\u00e3o final.  </p>"}]}